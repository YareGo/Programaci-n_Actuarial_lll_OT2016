library(data.table)
library(data.table)
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
install.packages("data.table")
library(data.table)
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
library(data.table)
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DT=data.table(x=rnorm(9),y=y=rep(c("a","b","c"),each=3),z=rnorm(9))
DT=data.table(x=rnorm(9),y=y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
DT=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
tables()#Ver las tablas en la memoria
DT[2,]
DT[DT$y=="a"]
DT[2,]
DT[DT$y=="a"]
DT[c(2,3)]
DT[,c(2,3)]
DT[,list(mean(x),sum(z))]
DT[,table(y)]
DT[,w=z^2]
DT
DT[,w:=z^2]
DT
DT2<-DT
Dt[,y:=2]
DT
DT2<-DT
DT[,y:=2]
DT
DT2
head(D)
head(DT)
head(DT2)
DT[,m:={tmp<-(x+z);log2(tmp+5)}]
head(DT)
DT[,b:=mean(x+w),by=a]
DT[,a:=x>0]
DT
DT[,b:=mean(x+w),by=a]
DT
set.seed(123)
DT<-data.table(x=sample(letters[1:3],1E5,TRUE))
DT[,.N,by=x]
library(swirl)
install_from_swirl("Getting_and_Cleaning_Data")
skip
skip
skip()
skip()
swirl()
2
swirl()
swirl
library(swirl)
swirl()
path2csv<-datasets
path2csv<-dataset
path2csv<-read.csv(dataser)
path2csv<-read.csv(dataset)
path2csv<-read.csv(dataset)
skip()
dim(path2csv)
dim(mydf)
head()
skip()
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
library(dplyr)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
DT<-data.table(x=rep(letters[1:3],each=100),
y=rnorm(300))
setkey(DT,x)
DT['a']
library(data.table)
DT<-data.table(x=rep(letters[1:3],each=100),
y=rnorm(300))
setkey(DT,x)
DT['a']
DT1<-data.table(x=c('a','a','b','dt1'),y=1:4)
DT2<-data.table(x=c('a','b','dt2'),z=5:7)
setkey(DT1,x);setkey(DT2,x)
merge(DT1,DT2)
set.seed(1)
df_gde<-data.frame(x=rnorm(1E6),y=rnorm(1E6))
file<-tempfile()
write.table(df_gde,file=file,row.names = F,col.names = T,sep="\t",quote = F)
system.time(fread(file))
system.time(read.table(file,header=T,sep = "\t"))
install.packages("RMySQL")
install.packages("RMySQL")
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
result
install.packages("RMySQL")
library("RMySQL")
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
result
hg19<-dbConnect(MySQL(),user="genome",db="hg19",
host="genome-mysql.cse.ucsc.edu")
tablas<-dbListTables(hg19)
length(tablas)
tablas[1:3]
library(Hmisc); library(plyr)
data2<-mutate(data,zipGrupo=cut2(zipCode,g=4))
table(data2$zipGrupo)
library(Hmisc); library(plyr)
data2<-mutate(data,zipGrupo=cut2(zipCode,g=4))
table(data2$zipGrupo)
library(Hmisc); library(plyr)
data2<-mutate(data,zipGrupo=cut2(zipCode,g=4))
table(data2$zipGrupo)
library(Hmisc); library(plyr)
data2<-mutate(data,zipGrupo=cut2(zipCode,g=4))
table(data2$zipGrupo)
library(Hmisc); library(plyr)
data2<-mutate(data,zipGrupo=cut2(zipCode,g=4))
library(Hmisc); library(plyr)
data2<-mutate(data,zipGrupo=cut2(zipCode,g=4))
table(data2$zipGrupo)
x<-read(dpa.txt)
dpa<-read.table("dpa.txt",header=TRUE)
dpa<-read.table("dpa.txt",header = TRUE)
library(survival)
install.packages("LifeTables")
LifeTables
read.table("LifeTables")
install.packages("LifeTables")
LifeTables::?
View(df_gde)
setwd("~/GitHub/Programacion_Actuarial_lll_OT2016/Proyecto")
g <- function(col){
library(Rsolnp)#paquete
archivo <- read.csv("r.csv", header = T)#lee el archivo
longitud <- length(archivo[,col])#total de datos que hay en la fila
assign("longitud", longitud, .GlobalEnv)#hace la variable longitud universalpara ocupar en la siguiente función
datos <- gsub(",","",archivo[1:longitud,col])#le quita las comas a los datos para hacerlos caracter
real <- as.numeric(paste(datos))#la varible anterior la hace númerica
assign("real", real, .GlobalEnv)#también para hacerla real
x0 = c(0.002,.0001,1.105)#valores iniciales para solver
resultado=solnp(x0, fun = f, LB=c(0.001,0.000001,1.09), UB=c(0.003,0.001,1.12))#paquete de solver
assign("resultado", resultado, .GlobalEnv)#para hacer universal la variable
}
f <- function(x){
modelo <- vector("integer", longitud)#
error <- vector("numeric", longitud)#numeric para que pueda tomar los modelos que sea
longitud2 <- longitud -1 #para que ignore el titulo
edad <- (0:longitud2)
inicial <- real[1] #para que te de la población inicial
for (j in 0:longitud2) {
modelo[j+1] <- trunc(exp((x[2]/log(x[3]))*(1-x[3]^j) - x[1]*j)*inicial)
error[j+1] <- (modelo[j+1]-real[j+1]) ^2
}
errorT <- sqrt(mean(error))
errorT
}
g(24)
g(1)
g(24)
longitud2 <- longitud -1 #para que ignore el titulo
edad <- (0:longitud2)
r<-resultado$pars
final <- vector("integer", longitud)
for (j in 0:longitud2) {
final[j+1]<-trunc(exp((r[2]/log(r[3]))*(1-r[3]^j) - r[1]*j)*inicial)
}
for (j in 0:longitud2) {
final[j+1]<-trunc(exp((r[2]/log(r[3]))*(1-r[3]^j) - r[1]*j)*inicial)
}
inicial <- real[1] #para que te de la población inicial
for (j in 0:longitud2) {
final[j+1]<-trunc(exp((r[2]/log(r[3]))*(1-r[3]^j) - r[1]*j)*inicial)
}
par(mar = c(5,5,2,5))
with(d, plot(x, logp, type="l", col="red3",
ylab=expression(-log[10](italic(p))),
ylim=c(0,3)))
?par
g <- function(col){
library(Rsolnp)
archivo <- read.csv("r.csv", header = T)
longitud <- length(archivo[,col])
assign("longitud", longitud, .GlobalEnv)
datos <- gsub(",","",archivo[1:longitud,col])
real <- as.numeric(paste(datos))
assign("real", real, .GlobalEnv)
x0 = c(0.002,.0001,1.105)
resultado=solnp(x0, fun = f, LB=c(0.001,0.000001,1.09), UB=c(0.003,0.001,1.12))
assign("resultado", resultado, .GlobalEnv)
}
f <- function(x){
modelo <- vector("integer", longitud)
final <- vector("integer", longitud)
assign("final", final, .GlobalEnv)
error <- vector("numeric", longitud)
longitud2 <- longitud -1
assign("longitud2", longitud2, .GlobalEnv)
edad <- (0:longitud2)
inicial <- real[1]
assign("inicial", inicial, .GlobalEnv)
for (j in 0:longitud2) {
modelo[j+1] <- trunc(exp((x[2]/log(x[3]))*(1-x[3]^j) - x[1]*j)*inicial)
error[j+1] <- (modelo[j+1]-real[j+1]) ^2
}
errorT <- sqrt(mean(error))
errorT
}
r <- resultado$pars
for (j in 0:longitud2) {
final[j+1] <- trunc(exp((r[2]/log(r[3]))*(1-r[3]^j) - r[1]*j)*inicial)
}
plot(real,col = "red", type = "l", xlab = "", ylab = "", axes = F)
par(new = T)
plot(final, col ="blue", type = "l", xlab = "Edad", ylab = "Población")
legend("bottomleft", inset = 0.05, c("real", "modelo"), fill = c("red", "blue"))
title(main = "Análisis de supervivencia")
g(24)
g <- function(col){
library(Rsolnp)
archivo <- read.csv("r.csv", header = T)
longitud <- length(archivo[,col])
assign("longitud", longitud, .GlobalEnv)
datos <- gsub(",","",archivo[1:longitud,col])
real <- as.numeric(paste(datos))
assign("real", real, .GlobalEnv)
x0 = c(0.002,.0001,1.105)
resultado=solnp(x0, fun = f, LB=c(0.001,0.000001,1.09), UB=c(0.003,0.001,1.12))
assign("resultado", resultado, .GlobalEnv)
}
f <- function(x){
modelo <- vector("integer", longitud)
final <- vector("integer", longitud)
assign("final", final, .GlobalEnv)
error <- vector("numeric", longitud)
longitud2 <- longitud -1
assign("longitud2", longitud2, .GlobalEnv)
edad <- (0:longitud2)
inicial <- real[1]
assign("inicial", inicial, .GlobalEnv)
for (j in 0:longitud2) {
modelo[j+1] <- trunc(exp((x[2]/log(x[3]))*(1-x[3]^j) - x[1]*j)*inicial)
error[j+1] <- (modelo[j+1]-real[j+1]) ^2
}
errorT <- sqrt(mean(error))
errorT
}
r <- resultado$pars
for (j in 0:longitud2) {
final[j+1] <- trunc(exp((r[2]/log(r[3]))*(1-r[3]^j) - r[1]*j)*inicial)
}
plot(real,col = "red", type = "l", xlab = "", ylab = "", axes = F)
par(new = T)
plot(final, col ="blue", type = "l", xlab = "Edad", ylab = "Población")
legend("bottomleft", inset = 0.05, c("real", "modelo"), fill = c("red", "blue"))
title(main = "Análisis de supervivencia")
g <- function(col){
library(Rsolnp)
archivo <- read.csv("r.csv", header = T)
longitud <- length(archivo[,col])
assign("longitud", longitud, .GlobalEnv)
datos <- gsub(",","",archivo[1:longitud,col])
real <- as.numeric(paste(datos))
assign("real", real, .GlobalEnv)
x0 = c(0.002,.0001,1.105)
resultado=solnp(x0, fun = f, LB=c(0.001,0.000001,1.09), UB=c(0.003,0.001,1.12))
assign("resultado", resultado, .GlobalEnv)
}
f <- function(x){
modelo <- vector("integer", longitud)
final <- vector("integer", longitud)
assign("final", final, .GlobalEnv)
error <- vector("numeric", longitud)
longitud2 <- longitud -1
assign("longitud2", longitud2, .GlobalEnv)
edad <- (0:longitud2)
inicial <- real[1]
assign("inicial", inicial, .GlobalEnv)
for (j in 0:longitud2) {
modelo[j+1] <- trunc(exp((x[2]/log(x[3]))*(1-x[3]^j) - x[1]*j)*inicial)
error[j+1] <- (modelo[j+1]-real[j+1]) ^2
}
errorT <- sqrt(mean(error))
errorT
}
g(13)
r <- resultado$pars
for (j in 0:longitud2) {
final[j+1] <- trunc(exp((r[2]/log(r[3]))*(1-r[3]^j) - r[1]*j)*inicial)
}
plot(real,col = "red", type = "l", xlab = "", ylab = "", axes = F)
par(new = T)
plot(final, col ="blue", type = "l", xlab = "Edad", ylab = "Población")
legend("bottomleft", inset = 0.05, c("real", "modelo"), fill = c("red", "blue"))
title(main = "Análisis de supervivencia")
g <- function(col){
library(Rsolnp)
archivo <- read.csv("r.csv", header = T)
longitud <- length(archivo[,col])
assign("longitud", longitud, .GlobalEnv)
datos <- gsub(",","",archivo[1:longitud,col])
real <- as.numeric(paste(datos))
assign("real", real, .GlobalEnv)
x0 = c(0.002,.0001,1.105)
resultado=solnp(x0, fun = f, LB=c(0.001,0.000001,1.09), UB=c(0.003,0.001,1.12))
assign("resultado", resultado, .GlobalEnv)
}
f <- function(x){
modelo <- vector("integer", longitud)
final <- vector("integer", longitud)
assign("final", final, .GlobalEnv)
error <- vector("numeric", longitud)
longitud2 <- longitud -1
assign("longitud2", longitud2, .GlobalEnv)
edad <- (0:longitud2)
inicial <- real[1]
assign("inicial", inicial, .GlobalEnv)
for (j in 0:longitud2) {
modelo[j+1] <- trunc(exp((x[2]/log(x[3]))*(1-x[3]^j) - x[1]*j)*inicial)
error[j+1] <- (modelo[j+1]-real[j+1]) ^2
}
errorT <- sqrt(mean(error))
errorT
}
g(13)
r <- resultado$pars
for (j in 0:longitud2) {
final[j+1] <- trunc(exp((r[2]/log(r[3]))*(1-r[3]^j) - r[1]*j)*inicial)
}
plot(real,col = "red", type = "l", xlab = "", ylab = "", axes = F)
par(new = T)
plot(final, col ="blue", type = "l", xlab = "Edad", ylab = "Población")
legend("bottomleft", inset = 0.05, c("real", "modelo"), fill = c("red", "blue"))
title(main = "Análisis de supervivencia")
g <- function(col){
library(Rsolnp)
archivo <- read.csv("r.csv", header = T)
longitud <- length(archivo[,col])
assign("longitud", longitud, .GlobalEnv)
datos <- gsub(",","",archivo[1:longitud,col])
real <- as.numeric(paste(datos))
assign("real", real, .GlobalEnv)
x0 = c(0.002,.0001,1.105)
resultado=solnp(x0, fun = f, LB=c(0.001,0.000001,1.09), UB=c(0.003,0.001,1.12))
assign("resultado", resultado, .GlobalEnv)
}
f <- function(x){
modelo <- vector("integer", longitud)
final <- vector("integer", longitud)
assign("final", final, .GlobalEnv)
error <- vector("numeric", longitud)
longitud2 <- longitud -1
assign("longitud2", longitud2, .GlobalEnv)
edad <- (0:longitud2)
inicial <- real[1]
assign("inicial", inicial, .GlobalEnv)
for (j in 0:longitud2) {
modelo[j+1] <- trunc(exp((x[2]/log(x[3]))*(1-x[3]^j) - x[1]*j)*inicial)
error[j+1] <- (modelo[j+1]-real[j+1]) ^2
}
errorT <- sqrt(mean(error))
errorT
}
g(13)
r <- resultado$pars
for (j in 0:longitud2) {
final[j+1] <- trunc(exp((r[2]/log(r[3]))*(1-r[3]^j) - r[1]*j)*inicial)
}
plot(real,col = "red", type = "l", xlab = "", ylab = "", axes = F)
par(new = T)
plot(final, col ="blue", type = "l", xlab = "Edad", ylab = "Población")
legend("bottomleft", inset = 0.05, c("real", "modelo"), fill = c("red", "blue"))
title(main = "Análisis de supervivencia")
