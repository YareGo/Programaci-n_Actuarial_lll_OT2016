x<- list(1,"a","TRUE","1+4i")
x
class(x)
#Matrices
m<- matrix(nrow = 2,ncol = 3)
m
dim(m)
atributes(m)
x<- c(0.5,0.6)
m<- matrix(nrow = 2,ncol = 3)
m
dim(m)
atributes(m)
m<- matrix(nrow = 2,ncol = 3)
m
dim(m)
attributes(m)
m<- matrix(nrow = 2,ncol = 3)
m
dim(m)
attributes(m)
dim (m) <-c(3,2)
m
m<-matrix(1:6,3,2)
m
m
m
m<-matrix(1:6,3,3,TRUE)
m
class(m)
str(m)
dim(m)<-c(2,5)
x<-c(1,2,3)
y<-("a","b","c")
z<-c(x,y)
z
x<-c(1,2,3)
y<-("a","b","c")
z<-c(x,y)
z
x<-c(1,2,3)
y<-c("a","b","c")
z<-c(x,y)
z
m1<-rbind(m,x)
m1
m2
m3<-rbind(m,y)
m3
m2<-cbind(m,x)
m2
m1<-rbind(m,x)
m1
m2<-cbind(m,x)
m2
rbind(m1,y)
cbind(m2,y)
install.packages("rmarkdown")
install.packages("markdown")
#creamos una lista de 3 elementos
x<-list(foo=1:4,bar=0.6,baz="Hola")
#Extraemos el primer y tecer elemento de la lista
x[c(1,3)]
x[[c(1,3)]]
x<-list(foo=1:4,bar=0.6,baz="Hola")
name<-"foo"
x[[name]]
x$name
x$foo
#se pueden extraer elementos de los elementos extraídos
x<-list(a=list(10,12,14),b=list(3.14,2.81))
x[[c(1,3)]]
x[[1]][[3]]
x[[c(2,1)]]
#ej. extra
x[[1]][3]
x<-matrix(1:6,2,3)
x[1,2]
x[2,1]
x[1,]
x[,2]
x<-matrix(1:6,2,3)
x<-matrix(1:6,2,3)
x
x[1,2]
x[2,1]
x[1,]
x[,2]
#El resultado es un vector
x[1,2]
#con drop=FALSE,se mantiene la dimensión y
#el resultado será una matriz
x[1,2,drop=FALSE]
##
x[2,1]
x[1,]
x[,2]
x[1, ,drop=FALSE]
x<-list(aardvark=1:5)
x$a
x[["a"]]
x[["a,exact=FALSE"]]
x[["a",exact=FALSE]]
airquality[1:6,]
airquality[1:6,]
completos<-complete.cases(airquality)
completos
airquality[completos,]
airquality[completos,][1:6,]
airquality[1:6][completos,]
airquality[1:6,][completos,]
x<-1:4;y<-6.9
x+y
x>2
x>=2
y==8
x*y
x/y
x<-1:4;y<-6:9
x+y
x>2
x>=2
y==8
x*y
x/y
x<-1:4;y<-6:9
x
y
x+y
x<-1:4;y<-6:8
x
y
x+y
X<-C("a","b","c"."d")
for (i in 1:4 ) {
print(x[i])
}
s<-matrix(1:6,2,3)
s
X<-C("a","b","c","d")
for (i in 1:4 ) {
print(x[i])
}
s<-matrix(1:6,2,3)
s
for(i in s){
print(matrix[,1])
}
X<-C("a","b","c","d")
for (i in 1:4 ) {
print(x[i])
}
for (i in seq_along(x)) { #hace la secuencia a lo largo de x
print(x[i])
}
for(letra in x){
print(letra)
}
for(letra in x){
print(letra)
}
s<-matrix(1:6,2,3)
s
for(fila in s){
print(s[,fila])
}
print(s[fila,])
for(fila in s){
print(s[fila,])
}
x<-matrix(1:6,2,3)
for(i in seq_len(nrow(X))) {
for(j in seq_len(ncol(X))){
print(x[i,j])
}
}
x<- 0
y<- 0
for (i in 1:100) {
z<-5
while(z>=3 && z<=10)
print(z)
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
for (i in 1:100) {
z<-5
while(z>=3 && z<=10)
print(z)
caminata<-c(caminata[i],z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
for (i in 1:100) {
z<-5
while(z>=3 && z<=10)
#print(z)
#caminata<-c(caminata[i],z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
for (i in 1:100) {
z<-5
caminata<-vector("numeric")
while(z>=3 && z<=10)
#print(z)
#caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
for (i in 1:100) {
z<-5
caminata<-vector("numeric")
while(z>=3 && z<=10)
#print(z)
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
for (i in 1:100) {
z<-5
caminata<-vector("numeric")
while(z>=3 && z<=10)
#print(z)
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
for (i in 1:100) {
z<-5
caminata<-vector("numeric")
while(z>=3 && z<=10)
#print(z)
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
print(caminata)
if(z>5){
x<-x+1
}else{
y<-y+1
}
#caminata[i]
#plot(caminata,type="l")
x
y
x<- 0 #arriba
y<- 0 #abajo
for (i in 1:100) {
z<-5
caminata<-vector("numeric")
while(z>=3 && z<=10)
#print(z)
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
z <- 5
caminata<-vector("numeric")
for (i in 1:100) {
caminata<-vector("numeric")
while(z>=3 && z<=10)
#print(z)
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
z <- 5
caminata<-vector("numeric")
for (i in 1:100) {
while(z>=3 && z<=10)
#print(z)
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
z <- 5
caminata<-vector("numeric")
for (i in 1:100) {
while(z>=3 && z<=10)
#print(z)
caminata<-vector(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
for (i in 1:100) {
while(z>=3 && z<=10)
#print(z)
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
z <- 5
caminata<-vector("numeric")
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
z<-z+1
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
z<-z-1
x<-0
y<-0
z<-5
caminata<-vector("numeric")
for (i in 1:100) {
while(z>=3 && z<=10) {
moneda<-rbinom(1,1,0.5)
if(moneda==1){
z<-z+1
} else {
z<-z-1
}
caminata<-c(caminata,z)
}
}
caminata
x<-0
y<-0
z<-5
caminata<-vector("numeric")
for (i in 1:100) {
while(z>=3 && z<=10) {
moneda<-rbinom(1,1,0.5)
if(moneda==1){
z<-z+1
} else {
z<-z-1
}
caminata<-c(caminata,z)
}
if(z>5){
x<-x+1
}else{
y<-y+1
}
}
caminata
suma2<-function(x,y){
x+y
}
suma2   (1,2)
mayor10<-function(x){ #se va a crear un vector
x[x>10]
}
mayor10(1:20)
mayor(runif(100.5,15))
mayor10(runif(100,5,15))
mayorque<-function(x,n){
x[x>n]
}
mayorque(1:10,3)
promedioCol<-function(x,quitar.NA=TRUE){
nc<-ncol(x) #número de columnas
medias<-vector("numeric",nc)
for(i in 1:nc){
medias[i]<-mean(x[,i],na.rm=quitar.NA)#es ,i porque queremos toda la columna, sin número de fila
}
}
promedioCol(as.data.frame(c(1,2,3,NA)))
promedioCol<-function(x,quitar.NA=TRUE){
nc<-ncol(x) #número de columnas
medias<-vector("numeric",nc)
for(i in 1:nc){
medias[i]<-mean(x[,i],na.rm=quitar.NA)#es ,i porque queremos toda la columna, sin número de fila
}
medias
}
promedioCol(as.data.frame(c(1,2,3,NA)))
>paste("a","b",se=":")
paste("a","b",se=":")
paste("a","b",":")
paste("a","b",sep=":")
corr<-function(directorio,horizonte){
directorio<-setwd("~/GitHub/Programacion_Actuarial_lll_OT2016/specdata/specdata")
x<- 0
y<-length(list.files(directorio))
resultado<-vector("numeric")
id<-vector("numeric")
a <- 1
horizonte <- 100
for(a in 1:y){
xao<-paste(directorio,list.files(directorio)[a],sep="/")
db<-read.csv(xao)
yolo<-sum(complete.cases(db))
if (yolo>horizonte){
x<-x+1
length(id)<-length(id)+1
id[x]<-list.files(directorio)[a]
length(resultado)<-length(resultado)+1
}
}
lili<-length(id)
for (i in 1:lili){
me<-paste(directorio,id[i],sep="/")
k<-read.csv(me)
p<-k[,2]
d<-k[,3]
resultado[i]<-cor(p,d,use="complete.obs")
}
resultado
}
corr(directorio, 100)
#Parte 3
##directorio:vector de tamaño de caracteres de tamaño 1 con la
##dirección de ubicaci+on de los archivos
##horizonte:es un vector númerico de tamaño 1 que indica el
##número de casos completos requeridos para calcular la
##correlación entre nitrato y sulfato en ese monitor
##Regresa un vector con las correlaciones de los que cumplieron
corr<-function(directorio,horizonte){
directorio<-setwd("~/GitHub/Programacion_Actuarial_lll_OT2016/specdata/specdata")
x<- 0
y<-length(list.files(directorio))
resultado<-vector("numeric")
id<-vector("numeric")
a <- 1
horizonte <- 100
for(a in 1:y){
xao<-paste(directorio,list.files(directorio)[a],sep="/")
db<-read.csv(xao)
yolo<-sum(complete.cases(db))
if (yolo>horizonte){
x<-x+1
length(id)<-length(id)+1
id[x]<-list.files(directorio)[a]
length(resultado)<-length(resultado)+1
}
}
id
lili<-length(id)
for (i in 1:lili){
me<-paste(directorio,id[i],sep="/")
k<-read.csv(me)
p<-k[,2]
d<-k[,3]
resultado[i]<-cor(p,d,use="complete.obs")
}
resultado
}
corr(directorio, 100)
source('~/GitHub/Programacion_Actuarial_lll_OT2016/specdata/corr.R')
source('~/GitHub/Programacion_Actuarial_lll_OT2016/specdata/corr.R')
