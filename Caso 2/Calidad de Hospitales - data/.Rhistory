}
print(caminata)
if(z>5){
x<-x+1
}else{
y<-y+1
}
#caminata[i]
#plot(caminata,type="l")
x
y
x<- 0 #arriba
y<- 0 #abajo
for (i in 1:100) {
z<-5
caminata<-vector("numeric")
while(z>=3 && z<=10)
#print(z)
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
z <- 5
caminata<-vector("numeric")
for (i in 1:100) {
caminata<-vector("numeric")
while(z>=3 && z<=10)
#print(z)
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
z <- 5
caminata<-vector("numeric")
for (i in 1:100) {
while(z>=3 && z<=10)
#print(z)
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
z <- 5
caminata<-vector("numeric")
for (i in 1:100) {
while(z>=3 && z<=10)
#print(z)
caminata<-vector(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
for (i in 1:100) {
while(z>=3 && z<=10)
#print(z)
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<-z+1
}else{
z<-z-1
}
}
x<- 0 #arriba
y<- 0 #abajo
z <- 5
caminata<-vector("numeric")
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
z<-z+1
caminata<-c(caminata,z)
moneda<-rbinom(1,1,0.5)
z<-z-1
x<-0
y<-0
z<-5
caminata<-vector("numeric")
for (i in 1:100) {
while(z>=3 && z<=10) {
moneda<-rbinom(1,1,0.5)
if(moneda==1){
z<-z+1
} else {
z<-z-1
}
caminata<-c(caminata,z)
}
}
caminata
x<-0
y<-0
z<-5
caminata<-vector("numeric")
for (i in 1:100) {
while(z>=3 && z<=10) {
moneda<-rbinom(1,1,0.5)
if(moneda==1){
z<-z+1
} else {
z<-z-1
}
caminata<-c(caminata,z)
}
if(z>5){
x<-x+1
}else{
y<-y+1
}
}
caminata
suma2<-function(x,y){
x+y
}
suma2   (1,2)
mayor10<-function(x){ #se va a crear un vector
x[x>10]
}
mayor10(1:20)
mayor(runif(100.5,15))
mayor10(runif(100,5,15))
mayorque<-function(x,n){
x[x>n]
}
mayorque(1:10,3)
promedioCol<-function(x,quitar.NA=TRUE){
nc<-ncol(x) #número de columnas
medias<-vector("numeric",nc)
for(i in 1:nc){
medias[i]<-mean(x[,i],na.rm=quitar.NA)#es ,i porque queremos toda la columna, sin número de fila
}
}
promedioCol(as.data.frame(c(1,2,3,NA)))
promedioCol<-function(x,quitar.NA=TRUE){
nc<-ncol(x) #número de columnas
medias<-vector("numeric",nc)
for(i in 1:nc){
medias[i]<-mean(x[,i],na.rm=quitar.NA)#es ,i porque queremos toda la columna, sin número de fila
}
medias
}
promedioCol(as.data.frame(c(1,2,3,NA)))
>paste("a","b",se=":")
paste("a","b",se=":")
paste("a","b",":")
paste("a","b",sep=":")
lm
lm
lm<-function(x){x*x}
lm
rm(lm)
lm
lm<-function(x){x*x}
rm(lm)
lm
lm
search()
library(ggplot2)
hacer.potencia<-function(n){
potencia<-function(x){
x^n
}
potencia
}
hacer.potencia(6)
cubica<-hacer.potencia(3)
cuadrada<-hacer.potencia(2)
cubica<-hacer.potencia(3)
cuadrada<-hacer.potencia(2)
cubica
cubica(3)
cuadrada(2)
cubica<-hacer.potencia(3)
cuadrada<-hacer.potencia(2)
cubica(3)
cuadrada(2)
n
ls(environment(cubica))
get("n",environment(cubica))
ls(environment(cuadrada))
get("n",enviroment(cuadrada))
get("n",environment(cuadrada))
y<-10
f<-function(x){
y<-2
y^2+g(x)
}
g<-function(x){
x*y
}
f(3)
View(hacer.potencia)
x<-as.Date("1970-01-02")
x
unclass(x)
unclass(as.Date("1970-01-02"))
x<-as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1970-01-02"))
date()
lapply
x<list(a=1:5,b=norm(1000)) #Crea una lista de 2 elementos a y b, donde
#b genera valores aleatorios con distribución normal estándar
lapply(x,mean)#Colección de 10000 variables aletorias de ditribución normal estándar
x<list(a=1:5,b=norm(1000)) #Crea una lista de 2 elementos a y b, donde
x<list(a=1:5,b=rnorm(1000)) #Crea una lista de 2 elementos a y b, donde
x<-list(a=1:5,b=rnorm(1000)) #Crea una lista de 2 elementos a y b, donde
lapply(x,mean)#Colección de 10000 variables aletorias de ditribución normal estándar
x<-list(a=1:5,b=rnorm(10),c=rnorm(10,1),d=rnorm(10,2))
lapply(x,mean)
x<-1:4
lapply(x,runif)
lapply(x,runif,max=15, min=5)
sapply(x, mean) #te da un vector, con el nombre de los elementos de cada uno
lapply(x,runif)
sapply(x, mean) #te da un vector, con el nombre de los elementos de cada uno
x<-1:4
sapply(x, mean) #te da un vector, con el nombre de los elementos de cada uno
sapply(x,runif,max=15,min=5)
sapply(x, mean) #te da un vector, con el nombre de los elementos de cada uno
x<-1:4
lapply(x,runif)
x<-list(a=1:5,b=rnorm(10),c=rnorm(10,1),d=rnorm(10,2))
sapply(x, mean) #te da un vector, con el nombre de los elementos de cada uno
str(apply)
apply(x,2,mean)
apply(x,1,Sum)
x<-matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,Sum)
x<-matri(rnorm(200),20, 10)
apply(x,1,quantile,probs=c(0.25,0.75))
x<-matrix(rnorm(200),20, 10)
apply(x,1,quantile,probs=c(0.25,0.75))
a<-array(rnorm2*2*10),c(2,2,10)
a<-array(rnorm(2*2*10),c(2,2,10))
apply(a,c(1,2),mean)
rowMeans(a,dims = 2)
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
mapply(rep,1:4,4:1)
noise<-function(n.eman,sd){
rnorm(n,mean,sd)
}
noise(5,1,2)
noise(1:5,1:5,2)
noise<-function(n.eman,sd){
rnorm(n,mean,sd)
}
noise(5,1,2)
noise(1:5,1:5,2)
noise(5,1,2)
str(tapply)#T:table, aplica a una tabla
x<-c(rnorm(10),runif(10),rnorm(10,1))
f<-gl(3,10)
f
tapply(x,f,mean)
tapply(x,f,mean,simplify = f)
tapply(x,f,mean,simplify = f)
tapply(x,f,mean,simplify = F)
x<-c(rnorm(10),runif(10),rexp(10))
f<-gl(3,10)
f
split(x,f)
x<-c(rnorm(10),runif(10),rexp(10))
f<-gl(3,10)
f
split(x,f)
lapply(split(x,f),mean)
library(datasets)
head(airquality)
function(x,lapply(x[1,]))
split(x,lapply(x[1,]))
lapply(s,function(x),colMeans(x[,1:3]))
lapply(s,function(x)colMeans(x[,1:3]))
s<-split(airquality,airquality$Month)
lapply(s,function(x)colMeans(x[,1:3]))
sapply(s,funcion(x)colMeans(x[,1:4],na.rm = T))
s<-split(airquality,airquality$Month)
sapply(s,funcion(x)colMeans(x[,1:4],na.rm = T))
sapply(s,function(x) colMeans(x[,1:4],na.rm = T))
s<-split(airquality,airquality$Month)
lapply(s,function(x)colMeans(x[,1:3]))
sapply(s,function(x) colMeans(x[,1:4],na.rm = T))
x
str(split(x,list(f1,f2)))
str(Str)
str(str)
x<-rnorm(100)
str(x)
summary(x)
f<-gl(40,10)
str(f)
summary(f)
str(airquality)
m<-matrix(rnorm(100),10,10)
str(m)
m
str(m)
s<-split(airquality)
s<-split(airquality,airquality$Month)
s
str(s)
x<-rnorm(10)
x<-rnorm(10)
x
y<-rnorm(10,50,5)
y
summary(x)
summary(y)
set.seed(1)
rnorm(5)
set.seed(2)
rnorm(5)
rnorm(5)
normal1<-rnorm(1000)
normal2<-rnorm(1000, 10,5)
hist(normal1)
summary(normal1)
hist(normal2)
summary(2)
summary(normal2)
rpoist(10,1)
rpois(10,1)
poisson2<-rpois(1000,10)
poisson1<-rpois(10000,1)
rpois(10,1)
poisson1<-rpois(10000,1)
poisson2<-rpois(1000,10)
hist(poisson1)
hist(poisson2)
ppois(2,2)
pppois(4,2)
ppois(4,2)
ppois(6,2)
ppois(2,2)
hist(rpois(1000,2))
summary(hist(rpois(100,2)))
as.numeric(as.integer(probs*10000))/10000
as.numeric(as.integer(probs*10000))/100
for(i in 0:11){print(dpois(i,2))}
probs[12]<-1-ppois(10,lambda = 2)
as.numeric(as.integer(probs*10000))/100
hist(runif(1000,10,20))
set.seed(20) #semilla 20
x<-rnorm(100,0,1)
e<-rnomr(100,0,2)
y<-0.5 + 2 * x + e
plot(x,y)
set.seed(20) #semilla 20
x<-rnorm(100,0,1)
e<-rnorm(100,0,2)
y<-0.5 + 2 * x + e
plot(x,y)
z<-0.5+2*x
plot(x,z)
plot(z,y)
library("swirl")
swirl()
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
my_vector
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
set.seed(10)
x<-rbinom(100,1,0.5)#genera 100 variables, de tamaño 1 de la muestra(1 intento)
e<-rnorm(100,0,2)
y<-0.5+2*x+e
summary(y)
plot(x,y,main="Modelo Lineal",col="dark red")
set.seed(1)
x<-rnom(100)
log.mu<-0.5+0.3*x
y<-rpois(100,exp(log.mu))
summary(y)
plot(x,y,main = "Modelo Poisson",col="forestgreen")
set.seed(1)
x<-rnom(100)
log.mu<-0.5+0.3*x
y<-rpois(100,exp(log.mu))
summary(y)
plot(x,y,main = "Modelo Poisson",col="forestgreen")
library(swirl)
swirl()
my_matrix2
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(cnames)
colnames(my_data)
colnames(my_data)<-cnames
my_data
library(swirl)
swirl()
TRUE
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
5==7
5!==7
5!=7
5==7
5=!/
5=!7
5!==7
5!=7
5!=7
5==7
5==7
5==7!
5!==7
5!=7
5=!7
5!=7
5!=7
!5==7
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical("twins"."twins")
identical("twins","twins")
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which()
which(7)
which(ints)
which(7)
which(ints,7)
which(ints>7)
any(ints<0)
all(ints=0)
all(ints>0)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
boring_function <- function(x) {
x
submit()
x#x
}
submit()
library(swirl)
swirl()
submit()
x
submit(x)
submit()
x
boring_function(x)
outcome<-read.csv("outcome-of-care-measures.csv",colClasses = "character")
outcome<-read.csv("outcome-of-care-measures.csv",colClasses = "character")
outcome<-read.csv("outcome-of-care-measures.csv",colClasses = "character")
outcome<-read.csv("outcome-of-care-measures.csv",colClasses = "character")
head(outcome)
setwd("~/GitHub/Programacion_Actuarial_lll_OT2016/Caso 2/Calidad de Hospitales - data")
outcome<-read.csv("outcome-of-care-measures.csv",colClasses = "character")
head(outcome)
outcome<-read.csv("outcome-of-care-measures.csv",colClasses = "character")
head(outcome)
ncol(outcome)
names(outcome)
setwd("~/GitHub/Programacion_Actuarial_lll_OT2016/Caso 2/Calidad de Hospitales - data")
outcome<-read.csv("outcome-of-care-measures.csv",colClasses = "character")
head(outcome)
outcome[,11]<-as.numeric(outcome[,11])
hist(outcome[,11])
outcome[,11]<-as.numeric(outcome[,11])
hist(outcome[,11])
nrow(outcome)
estado<-unique(data$state)
